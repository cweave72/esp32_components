syntax = "proto3";

import 'nanopb.proto';

package lfspart;

message FileInfo {
    uint32 type = 1;
    uint32 size = 2;
    string name = 3 [(nanopb).max_size = 64];
}

message GetFsInfo_call {
    /* Partition label. */
    string part_label = 1 [(nanopb).max_size = 18];
}
message GetFsInfo_reply {
    /* Partition address. */
    uint32 address = 1;
    /* Partition size, bytes. */
    uint32 size = 2;
    /* Size of a logical block, in bytes. */
    uint32 block_size = 3;
    /* Number of total blocks */
    uint32 block_count = 4;
}

message DirOpen_call {
    /* Partition label. */
    string part_label = 1 [(nanopb).max_size = 18];
    /* Path to open */
    string path = 2 [(nanopb).max_size = 64];
}
message DirOpen_reply {
    /* File descriptor, -1 on error. */
    int32 fd = 1;
}

message DirClose_call {
    uint32 fd = 1;
}
message DirClose_reply {}

message DirRead_call {
    /* File descriptor */
    uint32 fd = 1;
}
message DirRead_reply {
    bool valid = 1;
    FileInfo info = 2;
}

message FileOpen_call {
    /* Partition label. */
    string part_label = 1 [(nanopb).max_size = 18];
    /* Path to open */
    string path = 2 [(nanopb).max_size = 64];
    /* Flags */
    uint32 flags = 3;
}
message FileOpen_reply {
    /* Open status. 0 on success, negative on error. */
    int32 status = 1;
    /* File descriptor, -1 on error. */
    int32 fd = 2;
}

message FileClose_call {
    uint32 fd = 1;
}
message FileClose_reply {}

message FileRead_call {
    /* File descriptor */
    uint32 fd = 1;
    /* Use offset. */
    bool use_offset = 2;
    /* Offset in file. */
    uint32 offset = 3;
    /* Seek flag */
    uint32 seek_flag = 4;
    /* Size to read. */
    uint32 read_size = 5;
}
message FileRead_reply {
    /* Read status (number of bytes read, or negative error.
     * A status == 0 means EOF.
     */
    int32 status = 1;
    /* Read data */
    bytes data = 2 [(nanopb).max_size = 1000];
}

message FileWrite_call {
    /* File descriptor */
    uint32 fd = 1;
    /* Use offset. */
    bool use_offset = 2;
    /* Offset in file. */
    uint32 offset = 3;
    /* Seek flag */
    uint32 seek_flag = 4;
    /* Write data (size given by data.size) */
    bytes data = 5 [(nanopb).max_size = 1000];
}
message FileWrite_reply {
    /* Write status. (number of bytes written or error code.*/
    int32 status = 1;
}

message DirList_call {
    /* Partition label. */
    string part_label = 1 [(nanopb).max_size = 18];
    /* Path to open */
    string path = 2 [(nanopb).max_size = 64];
    /* Starting index of reply entry. */
    uint32 start_idx = 3;
}
message DirList_reply {
    bool valid = 1;
    /* Total entries in directory */
    uint32 num_entries = 2;
    /* Starting index of entry in info_array, */
    uint32 start_idx = 3;
    repeated FileInfo info_array = 4 [(nanopb).max_count = 8];
}

message Remove_call {
    /* Partition label. */
    string part_label = 1 [(nanopb).max_size = 18];
    /* Path to open */
    string path = 2 [(nanopb).max_size = 64];
}
message Remove_reply {
    int32 status = 1;
}

message GetFileSize_call {
    /* Partition label. */
    string part_label = 1 [(nanopb).max_size = 18];
    /* Path to open */
    string path = 2 [(nanopb).max_size = 64];
}
message GetFileSize_reply {
    int32 status = 1;
}

message LfsCallset {
    oneof msg {
        GetFsInfo_call    getfsinfo_call    = 1 ;
        GetFsInfo_reply   getfsinfo_reply   = 2 ;
        DirOpen_call      diropen_call      = 3 ;
        DirOpen_reply     diropen_reply     = 4 ;
        DirClose_call     dirclose_call     = 5 ;
        DirClose_reply    dirclose_reply    = 6 ;
        DirRead_call      dirread_call      = 7 ;
        DirRead_reply     dirread_reply     = 8 ;
        DirList_call      dirlist_call      = 9 ;
        DirList_reply     dirlist_reply     = 10;
        FileOpen_call     fileopen_call     = 11;
        FileOpen_reply    fileopen_reply    = 12;
        FileClose_call    fileclose_call    = 13;
        FileClose_reply   fileclose_reply   = 14;
        FileRead_call     fileread_call     = 15;
        FileRead_reply    fileread_reply    = 16;
        FileWrite_call    filewrite_call    = 17;
        FileWrite_reply   filewrite_reply   = 18;
        Remove_call       remove_call       = 19;
        Remove_reply      remove_reply      = 20;
        GetFileSize_call  getfilesize_call  = 21;
        GetFileSize_reply getfilesize_reply = 22;
    }
}
